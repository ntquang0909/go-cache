package cache

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

var instance Cache

type CacheItem struct {
	Name string
}

type Courier struct {
	Alias         string `json:"alias"`
	Name          string `json:"name"`
	ImageURL      string `json:"image_url"`
	Rating        int    `json:"rating"`
	Tracking      string `json:"tracking"`
	TermURL       string `json:"term_url"`
	PrivacyURL    string `json:"privacy_url"`
	ContactNumber string `json:"contact_number"`
	SupportURL    string `json:"support_url"`
}

type DeliveryService struct {
	ID                    string `json:"id"`
	Code                  string `json:"code"`
	Name                  string `json:"name"`
	Description           string `json:"description"`
	Courier               string `json:"courier"`
	EstimatedDeliveryTime string `json:"estimated_delivery_time"`
}

type Dimension struct {
	Weight int `json:"weight"`
	Length int `json:"length"`
	Width  int `json:"width"`
	Height int `json:"height"`
}

type AutoGenerated struct {
	ID                         string          `json:"id"`
	RateID                     string          `json:"rate_id"`
	TotalFee                   string          `json:"total_fee"`
	ShippingFee                string          `json:"shipping_fee"`
	Tax                        string          `json:"tax"`
	DeliveryService            DeliveryService `json:"delivery_service"`
	DeliveryServiceDescription string          `json:"delivery_service_description"`
	Courier                    *Courier        `json:"courier"`
	Rating                     int             `json:"rating"`
	Currency                   string          `json:"currency"`
	ProductType                string          `json:"product_type"`
	DeliveryType               string          `json:"delivery_type"`
	Dimension                  Dimension       `json:"dimension"`
	PackageType                string          `json:"package_type"`
}

func testStore(t *testing.T) {
	// Test string
	var key = "test_key"
	var strIn = "Hello world"
	var err = instance.Set(key, &strIn)
	assert.NoError(t, err)

	var strOut string
	err = instance.Get(key, &strOut)
	assert.NoError(t, err)

	assert.Equal(t, strOut, strIn)

	// Test struct
	var itemIn = AutoGenerated{
		ID:          "jt_standard_small_c0cbv999vbk2btpr6b702222222222",
		RateID:      "jt_standard_small",
		TotalFee:    "3.21",
		ShippingFee: "3.21",
		Tax:         "0",
		DeliveryService: DeliveryService{
			ID:                    "jt_standard",
			Code:                  "DOM123",
			Name:                  "Standard Delivery (1-3 days)",
			Description:           "Standard Delivery (1-3 days)",
			Courier:               "jt",
			EstimatedDeliveryTime: "1 - 3 Working Days",
		},
		DeliveryServiceDescription: "Next 3 days delivery",
		Courier: &Courier{
			Alias:         "jt",
			Name:          "J\u0026T",
			ImageURL:      "https://ezielog-staging.s3-ap-southeast-1.amazonaws.com/icons/courier/j\u0026t.svg",
			Rating:        5,
			Tracking:      "",
			TermURL:       "https://www.jtexpress.my/tnc.php",
			PrivacyURL:    "https://www.jtexpress.my/tnc.php",
			ContactNumber: "(+65) 6939 6399",
			SupportURL:    "https://www.jtexpress.sg/contact-us",
		},
		Rating:       5,
		Currency:     "SGD",
		ProductType:  "",
		DeliveryType: "pick_up",
		Dimension: Dimension{
			Weight: 1,
			Length: 38,
			Width:  15,
			Height: 20,
		},
		PackageType: "handbag",
	}
	err = instance.Set(key, &itemIn, time.Hour)
	assert.NoError(t, err)

	var itemOut AutoGenerated
	err = instance.Get(key, &itemOut)
	assert.NoError(t, err)

	assert.Equal(t, itemOut, itemIn)

	// // Test bool
	// var boolIn = true
	// err = instance.Set(key, &boolIn)
	// assert.NoError(t, err)

	// var boolOut bool
	// err = instance.Get(key, &boolOut)
	// assert.NoError(t, err)

	// assert.Equal(t, boolIn, boolOut)
}
func TestRedisCache(t *testing.T) {
	instance = NewRedisStore(&RedisStoreOptions{
		Address: "localhost:6379",
	})
	testStore(t)

}

func TestMemoryCache(t *testing.T) {
	instance = NewMemoryStore(MemoryStoreOptions{})
	testStore(t)

}

func TestMemcacheCache(t *testing.T) {
	/*
		Install memcached macOS:
		brew install memcached
		brew services restart memcached
		ps -few | grep memcached
	*/
	instance = NewMemcacheStore(&MemcacheStoreOptions{
		Servers: []string{"localhost:11211"},
	})

	testStore(t)

}

func TestMongoDBCache(t *testing.T) {
	instance = NewMongoDBStore(MongoDBStoreOptions{
		DatabaseURI:  "mongodb+srv://ezie:1234qwer@cluster0.2w4ft.mongodb.net",
		DatabaseName: "test_cache",
		Entity:       "caches",
	})
	testStore(t)

}
